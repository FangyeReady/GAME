function HotFix( ... )
	print 'HotFix begin'

	--修复函数测试
	xlua.hotfix(CS.shaco.Test.LuaHotFixTest, 'Add', function(self, a, b)
		return a + b;
	end)

	print 'HotFix Add end'

	--修复协程方法测试
	xlua.hotfix(CS.shaco.Test.LuaHotFixTest, {
		LoopCallBack = function(self)
			local util = require 'xlua.util'
			return util.cs_generator(function( ... )
				while true do 
					coroutine.yield(CS.UnityEngine.WaitForSeconds(1))
					print("----------lua LoopCallBack---------");
				end
			end)
		end
	})

	--xlua调用Unity c#方法测试
	xlua.hotfix(CS.shaco.Test.LuaHotFixTest, 'getLog', function(self)

		CS.shaco.Base.Utility.GetEplaseTime()

		--数组测试
		print('<<<<<<<<<<test list ........ 1>>>>>>>>>>')
		self.ListTest:Add(1)
		self.ListTest:Add(3)
		self.ListTest:Add(2)

		for i=0,self.ListTest.Count - 1 do
			print(self.ListTest[i])
		end
		print('<<<<<<<<<<test list ........ 2>>>>>>>>>>')
		for k,v in pairs(self.ListTest) do
			print(k,v)
		end

		--普通回调测试
		print('<<<<<<<<<<test normal callback>>>>>>>>>>')
		function tmpCallBack()
			return "get a lua log"
		end
		self.getlogcallback = tmpCallBack

		--泛型回调测试
		--参数需要在XLuaManager中加入对应类型，例如System.Action<byte[]>
		print('<<<<<<<<<<test genric callback>>>>>>>>>>')
		local pathTmp = CS.shaco.Base.FileHelper.ContactPath(CS.UnityEngine.Application.dataPath, 'Resources/100.json')
        CS.shaco.Base.FileHelper.ReadAllByUserPathAsync(pathTmp, function ( bytes )
            print('read bytes=====' .. tostring(bytes))
        end);

		--访问Unity函数测试
		print('<<<<<<<<<<test unity function>>>>>>>>>>')
		local findTmp = self:GetComponent(typeof(CS.shaco.Test.LuaHotFixTest))
		print(findTmp)
		print(self:Vec(CS.UnityEngine.Vector3(1.5, 2)))

		--访问成员变量测试
		print('<<<<<<<<<<test unity parameter>>>>>>>>>>')
		print('lua obj='..tostring(self.TextProgress.gameObject))

		CS.shaco.Log.Info('<<<<<<<<<<test unity static funtion[shaco.Log.Info()]>>>>>>>>>>', CS.UnityEngine.Color.white)

		--访问复杂方法 + 可变参数测试
		print("<<<<<<<<<<test params function>>>>>>>>>>")
		local actionMove1 = CS.shaco.MoveBy.Create(CS.UnityEngine.Vector3(10, 0), 1.0)
		local actinSequeue = CS.shaco.Sequeue.Create(actionMove1, actionMove2, actionMove1:Reverse())
		local reapeatAction = CS.shaco.Repeat.CreateRepeatForver(actinSequeue)
		reapeatAction:RunAction(self.TextUpdateState.gameObject)

		--访问扩展方法测试
		--似乎不支持基础数据类型的扩展方法，例如int, string等
		--如果需要访问c#扩展方法，需要在XluaManager中加入[XLua.LuaCallCSharp]属性
		self.TextProgress.gameObject:MoveBy(CS.UnityEngine.Vector3(10, 0), 1.0)

		-- 泛型测试
		-- 因为暂时不支持List、Dictionary等泛型类的创建，所以需要中间类CS.shaco.XLuaManager来创建泛型类
		print('<<<<<<<<<<test generic method 1>>>>>>>>>>')
		-- 注释掉的该方法同下方的CreateGenericClass结果一致，而使用CreateGenericClass更加方便，不用考虑泛型类的类型
		-- local functionGeneric = xlua.get_generic_method(CS.shaco.XLuaManager, 'Dictionary')
		-- local functionExcuete = functionGeneric(CS.System.String, CS.System.Int32)
		local dicGeneric = CS.shaco.CreateGenericClass.Dictionary()
		dicGeneric:Add('aa', 1)
		dicGeneric:Add('bb', 3)
		dicGeneric:Add(self, '123')

		if dicGeneric:ContainsKey(self) == true then
			print('ContainsKey result = true')
		else 
			print('ContainsKey result = false')
		end

		for k,v in pairs(dicGeneric) do
			print(k,v)
		end
		print('<<<<<<<<<<test generic method 2>>>>>>>>>>')
		local eventCallBack = CS.shaco.CreateGenericClass.EventCallBack()
		eventCallBack:AddCallBack(self, function(sender, arg)
			print('event callback arg=' .. tostring(arg.value))
		end)
		eventCallBack:InvokeAllCallBack(self, CS.shaco.Test.TestArg2())
		
		--打开消耗的时间
		print('use time=' .. CS.shaco.Base.Utility.GetEplaseTime().TotalMilliseconds)

		return self.getlogcallback()
	end)

	print 'HotFix end'
end

HotFix()